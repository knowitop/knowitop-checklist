<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.3">
	<constants>
	</constants>
	<classes>
		<class id="Checklist" _delta="define">
			<parent>DBObject</parent>
			<properties>
				<comment><![CDATA[/**
 * Checklist class
 *
 * @copyright   Copyright (C) 2017 Vladimir Kunin <v.b.kunin@gmail.com>
 */]]></comment>
				<category>bizmodel,searchable,structure</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>checklist</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="title"/>
					</attributes>
				</naming>
				<order>
					<columns>
						<column id="created_at" ascending="true"/>
					</columns>
				</order>
				<display_template/>
				<icon>images/checklist48.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="title"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="obj_class" xsi:type="AttributeString">
					<sql>obj_class</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="obj_key" xsi:type="AttributeObjectKey">
					<sql>obj_key</sql>
					<class_attcode>obj_class</class_attcode>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="obj_org_id" xsi:type="AttributeInteger">
					<sql>org_id</sql>
					<default_value>0</default_value>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="title" xsi:type="AttributeString">
					<sql>title</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="created_at" xsi:type="AttributeDateTime">
					<sql>created_at</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="items_list" xsi:type="AttributeLinkedSet">
					<linked_class>ChecklistItem</linked_class>
					<ext_key_to_me>checklist_id</ext_key_to_me>
					<edit_mode>in_place</edit_mode>
					<count_min>0</count_min>
					<count_max>0</count_max>
					<duplicates/>
				</field>
			</fields>
			<methods>
				<method id="OnInsert">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function OnInsert()
	{
		// TODO: нормальная сортировка чек-листов
		$this->SetCurrentDate('created_at');
	}]]></code>
				</method>
				<method id="MapContextParam">
					<static>true</static>
					<access>public</access>
					<type>Overload-ExNihilo</type>
					<code><![CDATA[	public static function MapContextParam($sContextParam)
	{
		if ($sContextParam == 'org_id') return 'obj_org_id';
		else return null;
	}]]></code>
				</method>
				<method id="SetHostObject">
					<static>false</static>
					<access>public</access>
					<type>Overload-ExNihilo</type>
					<code><![CDATA[	public function SetHostObject(DBObject $oHost, $bUpdateOnChange = false)
	{
		$sClass = get_class($oHost);
		$this->Set('obj_class', $sClass);
		$this->Set('obj_key', $oHost->GetKey());

		$aCallSpec = array($sClass, 'MapContextParam');
		if (is_callable($aCallSpec)) {
			$sAttCode = call_user_func($aCallSpec, 'org_id'); // Returns null when there is no mapping for this parameter
			if (MetaModel::IsValidAttCode($sClass, $sAttCode)) {
				$iOrgId = $oHost->Get($sAttCode);
				if ($iOrgId > 0) {
					if ($iOrgId != $this->Get('obj_org_id')) {
						$this->Set('obj_org_id', $iOrgId);
						if ($bUpdateOnChange) {
							$this->DBUpdate();
						}
					}
				}
			}
		}
	}]]></code>
				</method>
				<method id="SetDefaultOrgId">
					<static>false</static>
					<access>public</access>
					<type>Overload-ExNihilo</type>
					<code><![CDATA[	public function SetDefaultOrgId()
	{
		// First check that the organization CAN be fetched from the target class
		//
		$sClass = $this->Get('obj_class');
		$aCallSpec = array($sClass, 'MapContextParam');
		if (is_callable($aCallSpec)) {
			$sAttCode = call_user_func($aCallSpec, 'org_id'); // Returns null when there is no mapping for this parameter
			if (MetaModel::IsValidAttCode($sClass, $sAttCode)) {
				// Second: check that the organization CAN be fetched from the current user
				//
				if (MetaModel::IsValidClass('Person')) {
					$aCallSpec = array($sClass, 'MapContextParam');
					if (is_callable($aCallSpec)) {
						$sAttCode = call_user_func($aCallSpec, 'org_id'); // Returns null when there is no mapping for this parameter
						if (MetaModel::IsValidAttCode($sClass, $sAttCode)) {
							// OK - try it
							//
							$oCurrentPerson = MetaModel::GetObject('Person', UserRights::GetContactId(), false);
							if ($oCurrentPerson) {
								$this->Set('obj_org_id', $oCurrentPerson->Get($sAttCode));
							}
						}
					}
				}
			}
		}
	}]]></code>
				</method>
				<method id="GetHostObject">
					<static>false</static>
					<access>protected</access>
					<type>Overload-ExNihilo</type>
					<code><![CDATA[	protected function GetHostObject()
	{
		return MetaModel::GetObject($this->Get('obj_class'), $this->Get('obj_key'), true);
	}]]></code>
				</method>
				<method id="IsEditAllowed">
					<static>false</static>
					<access>public</access>
					<type>Overload-ExNihilo</type>
					<code><![CDATA[	public function IsEditAllowed()
	{
		$oHost = $this->GetHostObject();
		return ChecklistPlugin::IsHostObjEditAllowed($oHost);
	}]]></code>
				</method>
				<method id="Render">
					<static>false</static>
					<access>public</access>
					<type>Overload-ExNihilo</type>
					<code><![CDATA[	public function Render($bEditMode = false)
	{
		$bEditMode = $this->IsEditAllowed() && $bEditMode;
		// Render items
		$oItemSet = $this->Get('items_list');
		$aChecklistItems = array();
		while ($oItem = $oItemSet->Fetch()) {
				array_push($aChecklistItems, el('li', null, self::RenderItem($oItem, $bEditMode)));
		}
		// Render actions
		$sChecklistActions = '';
		$sChecklistTitleEdit = '';
		if ($bEditMode) {
			$sChecklistActions = el('div.checklist-new-item', null, array(
				el('a.checklist-btn.quiet', array('data-checklist-action' => 'new_item'), \Dict::S('Checklist:Button:NewItem')),
				el('input.checklist-item-text-input', array('name' => 'newItemText', 'maxlength' => 255, 'placeholder' => \Dict::S('Checklist:NewItemPlaceholder'))),
				el('div.checklist-item-actions', null, array(
					el('a.checklist-btn.quiet', array('data-checklist-action' => 'save_item'), \Dict::S('Checklist:Button:Save')),
					el('a.checklist-btn.quiet', array('data-checklist-action' => 'cancel_item'), \Dict::S('Checklist:Button:Cancel')))
				)
			));
			$sChecklistTitleEdit = el('input.checklist-title-text-input', array('name' => 'listTitle', 'value' => $this->Get('title'), 'maxlength' => 255));
			$sChecklistTitleEdit .= el('div.checklist-title-actions', null, array(
				el('a.checklist-btn.quiet', array('data-checklist-action' => 'edit'), \Dict::S('Checklist:Button:Edit')),
				el('a.checklist-btn.quiet', array('data-checklist-action' => 'delete'), \Dict::S('Checklist:Button:Delete')),
				el('a.checklist-btn.quiet', array('data-checklist-action' => 'save'), \Dict::S('Checklist:Button:Save')),
				el('a.checklist-btn.quiet', array('data-checklist-action' => 'cancel'), \Dict::S('Checklist:Button:Cancel'))
			));
		}
		// Render checklist
		$iChecklistId = $this->GetKey();
		$sChecklistName = $this->GetName(); // . " ($iChecklistId)";
		$sHtml = el('div.checklist', array('data-checklist-id' => $iChecklistId, 'data-checklist-name' => $sChecklistName), array(
			el('div.checklist-title', array('data-checklist-id' => $iChecklistId), array(
				el('h3.checklist-title-text', null, $sChecklistName), $sChecklistTitleEdit)),
			el('ol.checklist-items', null, $aChecklistItems),
			$sChecklistActions
		));
		return $sHtml;
	}]]></code>
				</method>
				<method id="RenderItem">
					<static>false</static>
					<access>public</access>
					<type>Overload-ExNihilo</type>
					<code><![CDATA[	public function RenderItem(ChecklistItem $oItem, $bEditMode = false)
	{
		$iItemId = $oItem->GetKey();
		$sItemText = $oItem->Get('text');
		$sItemCheckedAt = $oItem->GetAsHTML('checked_at');
		$sCheckedAttr = $oItem->Get('state') == 1 ? 'checked' : '';
		$sCheckedClass = $sCheckedAttr ? 'checklist-item-state-complete' : '';
		$sDisabledAttr = $this->IsEditAllowed() ? '' : 'disabled';

		$sEditSection = '';
		if ($bEditMode) {
			$sTextInput = el('input.checklist-item-text-input', array('type' => 'text', 'name' => 'itemText', 'value' => $sItemText, 'maxlength' => 255));
			$sButtons = el('div.checklist-item-actions', null, array(
				el('a.checklist-btn quiet', array('data-item-action' => 'edit'), \Dict::S('Checklist:Button:Edit')),
				el('a.checklist-btn quiet', array('data-item-action' => 'delete'), \Dict::S('Checklist:Button:Delete')),
				el('a.checklist-btn quiet', array('data-item-action' => 'save'), \Dict::S('Checklist:Button:Save')),
				el('a.checklist-btn quiet', array('data-item-action' => 'cancel'), \Dict::S('Checklist:Button:Cancel')),
			));
			$sEditSection = $sTextInput . $sButtons;
		}

		$sHtml = el('div.checklist-item.' . $sCheckedClass, array('data-item-id' => $iItemId), array(
			el('div.checklist-item-checkbox', null,
				el('input', array('type' => 'checkbox', 'name' => 'itemState', $sCheckedAttr, $sDisabledAttr))
			),
			el('div.checklist-item-text', null, $sItemText),
			el('div.checklist-item-checked-at.quiet', null, $sItemCheckedAt),
			$sEditSection
		));

		return $sHtml;
	}]]></code>
				</method>
				<method id="FillFromTemplate">
					<static>false</static>
					<access>public</access>
					<type>Overload-ExNihilo</type>
					<code><![CDATA[	public function FillFromTemplate(ChecklistTemplate $oTemplate)
	{
		// TODO: использовать ExecAction в DBObject для шаблонов
		// $aContext = $oObj->ToArgs('this'); // TODO: для замены плейсхолдеров в шаблонах
		// // Apply context ($this->...$)
		// $sText = MetaModel::ApplyParams($oTemplate->Get('body'), $aContext);

		$this->Set('title', $oTemplate->Get('title'));
		$aItemsText = explode("\n", $oTemplate->Get('items_text'));
		$this->DBWrite();
		foreach ($aItemsText as $sItemText) {
			$oItem = MetaModel::NewObject('ChecklistItem'); // new ChecklistItem();
			$oItem->Set('checklist_id', $this->GetKey());
			$oItem->Set('text', $sItemText);
			$oItem->DBWrite();
		}
	}]]></code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="obj_key">
							<rank>10</rank>
						</item>
						<item id="obj_class">
							<rank>20</rank>
						</item>
						<item id="obj_org_id">
							<rank>30</rank>
						</item>
						<item id="title">
							<rank>40</rank>
						</item>
						<item id="items_list">
							<rank>50</rank>
						</item>
						<item id="created_at">
							<rank>60</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="obj_key">
							<rank>10</rank>
						</item>
						<item id="obj_class">
							<rank>20</rank>
						</item>
						<item id="obj_org_id">
							<rank>30</rank>
						</item>
						<item id="title">
							<rank>40</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="obj_key">
							<rank>10</rank>
						</item>
						<item id="obj_class">
							<rank>20</rank>
						</item>
						<item id="obj_org_id">
							<rank>30</rank>
						</item>
						<item id="title">
							<rank>40</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<class id="ChecklistItem" _delta="define">
			<parent>DBObject</parent>
			<properties>
				<comment><![CDATA[/**
 * ChecklistItem class
 *
 * @copyright   Copyright (C) 2017 Vladimir Kunin <v.b.kunin@gmail.com>
 */]]></comment>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>checklistitem</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="checklist_title"/>
						<attribute id="text"/>
					</attributes>
				</naming>
				<order>
					<columns>
						<column id="created_at" ascending="true"/>
					</columns>
				</order>
				<display_template/>
				<icon>images/checkbox48.png</icon>
				<reconciliation>
					<attributes>
						<attribute id="text"/>
						<attribute id="checklist_id"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="checklist_id" xsi:type="AttributeExternalKey">
					<sql>checklist_id</sql>
					<target_class>Checklist</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
				</field>
				<field id="checklist_title" xsi:type="AttributeExternalField">
					<extkey_attcode>checklist_id</extkey_attcode>
					<target_attcode>title</target_attcode>
				</field>
				<field id="checklist_org_id" xsi:type="AttributeExternalField">
					<extkey_attcode>checklist_id</extkey_attcode>
					<target_attcode>obj_org_id</target_attcode>
				</field>
				<field id="text" xsi:type="AttributeString">
					<sql>text</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="state" xsi:type="AttributeBoolean">
					<sql>state</sql>
					<default_value>0</default_value>
					<is_null_allowed>true</is_null_allowed>
				</field>
				<field id="created_at" xsi:type="AttributeDateTime">
					<sql>created_at</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="checked_at" xsi:type="AttributeDateTime">
					<sql>checked_at</sql>
					<default_value/>
					<is_null_allowed>true</is_null_allowed>
				</field>
			</fields>
			<methods>
				<method id="OnInsert">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function OnInsert()
	{
		// TODO: сделать нормальную сортировку с плагином sortable
		$this->SetCurrentDate('created_at');
	}]]></code>
				</method>
				<method id="OnUpdate">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code>
						<![CDATA[	protected function OnUpdate()
	{
		if ($this->IsChecked() && array_key_exists('state', $this->ListChanges())) {
			$this->SetCurrentDate('checked_at');
		} else {
			$this->Reset('checked_at');
		}
	}]]></code>
				</method>
				<method id="IsChecked">
					<static>false</static>
					<access>protected</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[	protected function IsChecked()
	{
		return $this->Get('state') === true;
	}]]></code>
				</method>
				<method id="MapContextParam">
					<static>true</static>
					<access>public</access>
					<type>Overload-ExNihilo</type>
					<code><![CDATA[	public static function MapContextParam($sContextParam)
	{
		if ($sContextParam == 'org_id') return 'checklist_org_id';
		else return null;
	}]]></code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="text">
							<rank>10</rank>
						</item>
						<item id="state">
							<rank>20</rank>
						</item>
						<item id="checklist_id">
							<rank>30</rank>
						</item>
						<item id="checklist_org_id">
							<rank>40</rank>
						</item>
						<item id="created_at">
							<rank>50</rank>
						</item>
						<item id="checked_at">
							<rank>60</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="text">
							<rank>10</rank>
						</item>
						<item id="state">
							<rank>20</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="text">
							<rank>10</rank>
						</item>
						<item id="state">
							<rank>20</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<class id="ChecklistTemplate" _delta="define">
			<parent>ObjectTemplate</parent>
			<properties>
				<comment><![CDATA[/**
 * ChecklistTemplate class
 *
 * @copyright   Copyright (C) 2017 Vladimir Kunin <v.b.kunin@gmail.com>
 */]]></comment>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>objecttemplate_checklist</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</naming>
				<display_template/>
				<reconciliation>
					<attributes>
						<attribute id="name"/>
					</attributes>
				</reconciliation>
			</properties>
			<fields>
				<field id="title" xsi:type="AttributeString">
					<sql>title</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
				<field id="items_text" xsi:type="AttributeText">
					<sql>items_text</sql>
					<default_value/>
					<is_null_allowed>false</is_null_allowed>
				</field>
			</fields>
			<methods/>
			<presentation>
				<details>
					<items>
						<item id="col:col1">
							<rank>10</rank>
							<items>
								<item id="fieldset:ObjectTemplate:baseinfo">
									<rank>10</rank>
									<items>
										<item id="name">
											<rank>10</rank>
										</item>
										<item id="status">
											<rank>20</rank>
										</item>
										<item id="description">
											<rank>30</rank>
										</item>
									</items>
								</item>
							</items>
						</item>
						<item id="col:col2">
							<rank>20</rank>
							<items>
								<item id="fieldset:ObjectTemplate:template">
									<rank>10</rank>
									<items>
										<item id="title">
											<rank>10</rank>
										</item>
										<item id="items_text">
											<rank>20</rank>
										</item>
									</items>
								</item>
							</items>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="name">
							<rank>10</rank>
						</item>
						<item id="status">
							<rank>20</rank>
						</item>
						<item id="title">
							<rank>30</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="status">
							<rank>20</rank>
						</item>
						<item id="title">
							<rank>30</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
	</classes>
	<menus>
	</menus>
	<user_rights>
	</user_rights>
</itop_design>